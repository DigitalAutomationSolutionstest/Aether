"""
üé® TEMPLATES MODULE - Template di Codice per Aether

Template pronti per ogni tipo di generazione:
- Python scripts
- Web components
- API endpoints
- Data processors
- AI agents
"""

from pathlib import Path

TEMPLATES_DIR = Path(__file__).parent
TEMPLATES_DIR.mkdir(exist_ok=True)

# Template disponibili
AVAILABLE_TEMPLATES = [
    'python_script',
    'web_component', 
    'api_endpoint',
    'data_processor',
    'ai_agent',
    'automation_tool'
]

def get_template(template_name: str) -> str:
    """Recupera un template per nome"""
    template_file = TEMPLATES_DIR / f"{template_name}.py"
    
    if template_file.exists():
        return template_file.read_text(encoding='utf-8')
    else:
        return get_base_template()

def get_base_template() -> str:
    """Restituisce il template base"""
    return '''#!/usr/bin/env python3
"""
ü§ñ Generated by Aether AI - {timestamp}
Purpose: {purpose}
"""

import os
import sys
from datetime import datetime

def main():
    """Funzione principale generata da Aether"""
    print("ü§ñ Aether AI - Codice generato automaticamente")
    print(f"‚è∞ Timestamp: {{datetime.now()}}")
    
    # Il tuo codice qui
    pass

if __name__ == "__main__":
    main()
'''

__all__ = ['TEMPLATES_DIR', 'AVAILABLE_TEMPLATES', 'get_template', 'get_base_template'] 